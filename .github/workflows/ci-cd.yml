name: CI/CD Pipeline

on:
  push:
    branches: [ default ]
  pull_request:
    branches: [ default ]

jobs:
  build-test-and-deploy:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: userservice
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # 1. Получение кода
      - uses: actions/checkout@v3

      # 2. Настройка Go
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      # 3. Логин в Docker Hub (ранний логин для кэширования)
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # 4. Сборка Docker образа с тегом
      - name: Build and tag Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/user-microservice:latest .
          docker tag ${{ secrets.DOCKER_HUB_USERNAME }}/user-microservice:latest ${{ secrets.DOCKER_HUB_USERNAME }}/user-microservice:${{ github.sha }}

      # 5. Запуск контейнера и тестирование
      - name: Run container and test
        run: |
          docker run -d --network host \
            -e POSTGRES_HOST=localhost \
            -e POSTGRES_PORT=5432 \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=postgres \
            -e POSTGRES_DB=userservice \
            --name user-service ${{ secrets.DOCKER_HUB_USERNAME }}/user-microservice:latest
          sleep 10
          # Добавьте здесь ваши тестовые команды

      # 6. Создание скриншотов (опционально)
      - name: Capture screenshots
        if: success()
        run: |
          mkdir -p screenshots
          # Пример для веб-приложения (адаптируйте под ваш случай)
          docker exec user-service curl -s http://localhost:8080 > screenshots/page.html || echo "Skipping screenshots"
          tar -czvf screenshots.tar.gz screenshots/
        continue-on-error: true

      # 7. Загрузка образа в Docker Hub (только для ветки default)
      - name: Push Docker image
        if: github.ref == 'refs/heads/default' && success()
        run: |
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/user-microservice:latest
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/user-microservice:${{ github.sha }}

      # 8. Сохранение артефактов (скриншотов)
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: deployment-artifacts
          path: |
            screenshots.tar.gz
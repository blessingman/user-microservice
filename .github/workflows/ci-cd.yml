name: CI/CD Pipeline

on:
  push:
    branches: [ "default" ]
  pull_request:
    branches: [ "default" ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: userservice
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
      - name: Install dependencies
        run: go mod tidy
      - name: Run tests
        run: go test -v ./... -cover

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Build Docker Image
        run: |
          docker build -t user-microservice:latest -f Dockerfile .
          docker save user-microservice:latest > user-microservice-image.tar
      - name: Upload Docker Image Artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: user-microservice-image.tar

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image
      - name: Load Docker Image
        run: docker load < user-microservice-image.tar
      - name: Log in to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      - name: Tag and Push Docker Image
        run: |
          docker tag user-microservice:latest "${{ secrets.DOCKER_USERNAME }}/user-microservice:latest"
          docker push "${{ secrets.DOCKER_USERNAME }}/user-microservice:latest"

  integration-tests:
    runs-on: ubuntu-latest
    needs: deploy
    services:
      db:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U test"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
      - name: Install dependencies
        run: go mod tidy
      - name: Run integration tests
        env:
          DATABASE_URL: postgres://test:test@localhost:5432/test_db?sslmode=disable
        run: go test -v ./... -cover

name: Build and Test

# Триггеры для запуска CI/CD пайплайна
on:
  push:
    branches: [ main ]  # Запускать при пуше в ветку main
  pull_request:
    branches: [ main ]  # Запускать при создании PR в ветку main

jobs:
  build-and-test:
    runs-on: ubuntu-latest  # Выполнять на последней версии Ubuntu

    # Настраиваем сервисы, необходимые для тестирования
    services:
      postgres:
        image: postgres:14-alpine  # Используем PostgreSQL 14 на Alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: userservice
        ports:
          - 5432:5432  # Проброс порта PostgreSQL
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # Шаг 1: Получение кода из репозитория
      - uses: actions/checkout@v3

      # Шаг 2: Настройка Go версии 1.20
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      # Шаг 3: Сборка Docker образа
      - name: Build Docker image
        run: docker build -t user-microservice .

      # Шаг 4: Запуск Docker контейнера для тестирования
      - name: Run Docker container
        run: |
          # Запуск контейнера с явно указанным портом
          docker run -d -p 8080:8080 \
            -e POSTGRES_HOST=host.docker.internal \
            -e POSTGRES_PORT=5432 \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=postgres \
            -e POSTGRES_DB=userservice \
            --name user-service user-microservice
          
          echo "Waiting for container to start up..."
          sleep 20  # Увеличиваем время ожидания
          
          echo "Container status:"
          docker ps -a  # Show all containers including stopped ones
          
          echo "Container logs:"
          docker logs user-service
          
          echo "Checking network connectivity:"
          docker exec user-service ping -c 3 host.docker.internal || echo "Cannot ping host"
          
          echo "Checking database connection:"
          docker exec user-service nc -zv host.docker.internal 5432 || echo "Cannot connect to PostgreSQL"
          
          echo "Port binding:"
          netstat -tulpn | grep 8080 || echo "Port 8080 not bound"

      # Шаг 5: Тестирование API с помощью curl с дополнительной диагностикой
      - name: Test API with curl
        run: |
          echo "Network interfaces:"
          ip addr show
          
          echo "Port check:"
          ss -tulwn | grep 8080 || echo "No process listening on port 8080"
          
          echo "Checking if service is available..."
          curl -v http://localhost:8080/ || echo "Expected 404, continuing..."
          echo "Trying with host IP..."
          curl -v http://127.0.0.1:8080/ || echo "Expected 404, continuing..."
          
          echo "Creating user..."
          CREATE_RESPONSE=$(curl -v -X POST -H "Content-Type: application/json" -d '{"name":"Test User","email":"test@example.com"}' http://localhost:8080/users)
          echo "Response: $CREATE_RESPONSE"
          if [ -z "$CREATE_RESPONSE" ]; then
            echo "ERROR: No response received"
            echo "Container logs:"
            docker logs user-service
            exit 1
          fi
          
          USER_ID=$(echo $CREATE_RESPONSE | jq -r '.id')
          echo "Extracted user ID: $USER_ID"
          if [ "$USER_ID" == "null" ]; then
            echo "ERROR: Failed to extract user ID from response"
            echo "Container logs:"
            docker logs user-service
            exit 1
          fi
          
          # Получение пользователя по ID
          curl -s -X GET http://localhost:8080/users/$USER_ID || exit 1
          
          # Получение всех пользователей
          curl -s -X GET http://localhost:8080/users || exit 1
          
          # Обновление пользователя
          curl -s -X PUT -H "Content-Type: application/json" -d '{"name":"Updated User"}' http://localhost:8080/users/$USER_ID || exit 1
          
          # Удаление пользователя
          curl -s -X DELETE http://localhost:8080/users/$USER_ID || exit 1

      # Шаг 6: Аутентификация в Docker Hub (только для ветки main)
      - name: Log in to Docker Hub
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # Шаг 7: Публикация образа в Docker Hub (только для ветки main)
      - name: Push to Docker Hub
        if: github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/user-microservice:latest
